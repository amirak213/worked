package com.example.sahrelocationproject.tools

import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import android.content.pm.PackageManager
import android.location.Location
import androidx.core.app.ActivityCompat
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.rabbitmq.client.Channel
import com.rabbitmq.client.Connection
import com.rabbitmq.client.ConnectionFactory
import kotlinx.coroutines.CoroutineScope
import java.sql.DriverManager
import java.util.concurrent.Future

class LocationTools {



    fun produce(position: String) {

        val factory = ConnectionFactory()
        factory.host = "192.168.248.21"
        factory.username = "test"
        factory.password = "test"
        val connection: Connection = factory.newConnection()
        val channel: Channel = connection.createChannel()


        channel.basicPublish("", "gps_positions", null, position.toByteArray())

        DriverManager.println(" [x] Sent" + "'")
        channel.close()
        connection.close()
    }


    object UtilLocation {
        private lateinit var l : Location
        private lateinit var fusedLocationClient: FusedLocationProviderClient

        @SuppressLint("MissingPermission")
        fun getLocation(context: Context, callback: (Location) -> Unit) {

            fusedLocationClient = LocationServices.getFusedLocationProviderClient(context!!)

            fusedLocationClient.lastLocation
                .addOnSuccessListener { location : Location? ->
                    this.l = location!!
                    //  context.toast("my location is: ${location?.latitude}")
                    callback.invoke(this.l)
                }
        }
    }
}
